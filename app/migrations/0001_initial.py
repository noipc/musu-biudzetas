# Generated by Django 2.2.3 on 2019-07-07 21:28

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': 'Registruotas vartotojas',
                'verbose_name_plural': 'Registruoti vartotojai',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Budget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=20, verbose_name='Suma')),
                ('year', models.IntegerField(default=2015, verbose_name='Metai')),
                ('created_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Biudžetas',
                'verbose_name_plural': 'Biudžetai',
                'ordering': ['amount'],
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=300, verbose_name='Juridinio asmens pavadinimas')),
                ('slug', models.SlugField(unique=True)),
                ('legal_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Įmonės kodas')),
                ('status', models.IntegerField(choices=[(1, 'Aktyvus'), (2, 'Neaktyvus'), (3, 'Likviduojamas'), (4, 'Likviduotas')], default=1, verbose_name='Juridinio asmens statusas')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Juridinio asmens įkūrimo data')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Juridinio asmens likvidavimo data')),
                ('budget', models.ManyToManyField(to='app.Budget', verbose_name='Biudžetas')),
                ('created_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Juridinis asmuo',
                'verbose_name_plural': 'Juridiniai asmenys',
                'ordering': ['slug'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=300, unique=True, verbose_name='Apskritis')),
                ('slug', models.SlugField(unique=True)),
                ('created_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Apskritis',
                'verbose_name_plural': 'Apskritys',
                'ordering': ['slug'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PublicSector',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=300, unique=True, verbose_name='Viešosios politikos sritis')),
                ('slug', models.SlugField(unique=True)),
                ('created_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Juridinio asmens kategorija',
                'verbose_name_plural': 'Juridinio asmens kategorijos',
                'ordering': ['slug'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=300, verbose_name='Programos pavadinimas')),
                ('slug', models.SlugField(unique=True)),
                ('fund_source_type', models.IntegerField(choices=[(1, 'Valstybės finansavimas'), (2, 'Savivaldybės finansavimas')], verbose_name='Lėšų šaltinio tipas')),
                ('budget', models.ManyToManyField(to='app.Budget', verbose_name='Programos biudžetas')),
                ('created_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('fund_source_entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Entity', verbose_name='Finansuotojas')),
                ('pub_sector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.PublicSector', verbose_name='Viešosiso politikos sritis')),
                ('updated_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Programa',
                'verbose_name_plural': 'Programos',
                'ordering': ['slug'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Municipality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=300, unique=True, verbose_name='Savivaldybė')),
                ('short_name', models.CharField(db_index=True, max_length=150, verbose_name='Savivaldybės sutrumpintas pavadinimas')),
                ('slug', models.SlugField(unique=True)),
                ('created_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Region', verbose_name='Apskritis')),
                ('updated_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Savivaldybė',
                'verbose_name_plural': 'Savivaldyės',
                'ordering': ['slug'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EntityType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=300, unique=True, verbose_name='Juridinio asmens tipas')),
                ('slug', models.SlugField(unique=True)),
                ('created_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Juridinio asmens tipas',
                'verbose_name_plural': 'Juridinio asmens tipai',
                'ordering': ['slug'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EntityCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=300, unique=True, verbose_name='Juridinio asmens kategorija')),
                ('slug', models.SlugField(unique=True)),
                ('created_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Juridinio asmens kategorija',
                'verbose_name_plural': 'Juridinio asmens kategorijos',
                'ordering': ['slug'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='entity',
            name='entity_cat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.EntityCategory', verbose_name='Juridinio asmens kategorija'),
        ),
        migrations.AddField(
            model_name='entity',
            name='entity_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.EntityType', verbose_name='Juridinio asmens tipas'),
        ),
        migrations.AddField(
            model_name='entity',
            name='municipality_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Municipality', verbose_name='Savivaldybė'),
        ),
        migrations.AddField(
            model_name='entity',
            name='program_participant',
            field=models.ManyToManyField(help_text='Programa, iš kurios yra gaunamas finansavimas', to='app.Program', verbose_name='Programa'),
        ),
        migrations.AddField(
            model_name='entity',
            name='pub_sector',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.PublicSector', verbose_name='Viešosios politikos sritis'),
        ),
        migrations.AddField(
            model_name='entity',
            name='updated_by',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=3, verbose_name='Valiutos trumpinys')),
                ('created_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Valiuta',
                'verbose_name_plural': 'Valiutos',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='budget',
            name='currency',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Currency', verbose_name='Valiuta'),
        ),
        migrations.AddField(
            model_name='budget',
            name='updated_by',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='entity',
            field=models.ForeignKey(limit_choices_to={'is_staff': False}, on_delete=django.db.models.deletion.CASCADE, to='app.Entity', verbose_name='Darbovietė'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
